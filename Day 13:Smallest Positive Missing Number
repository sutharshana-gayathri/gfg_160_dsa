You are given an integer array arr[]. Your task is to find the smallest positive number missing from the array.

Note: Positive number starts from 1. The array can have negative integers too.

Examples:

Input: arr[] = [2, -3, 4, 1, 1, 7]
Output: 3
Explanation: Smallest positive missing number is 3.
Input: arr[] = [5, 3, 2, 5, 1]
Output: 4
Explanation: Smallest positive missing number is 4.
Input: arr[] = [-8, 0, -1, -4, -3]
Output: 1
Explanation: Smallest positive missing number is 1.
Constraints:  
1 <= arr.size() <= 105
-106 <= arr[i] <= 106




SOLUTION:



class Solution {
    // Function to find the smallest positive number missing from the array.
    public int missingNumber(int[] arr) {
        // Your code here
   
        int n = arr.length;

        // Step 1: Mark numbers out of range and convert negatives/zeros to a large positive number
        for (int i = 0; i < n; i++) {
            if (arr[i] <= 0 || arr[i] > n) {
                arr[i] = n + 1;
            }
        }

        // Step 2: Mark the indices of the elements as visited
        for (int i = 0; i < n; i++) {
            int num = Math.abs(arr[i]);
            if (num <= n) {
                int index = num - 1;
                arr[index] = -Math.abs(arr[index]); // Mark as visited
            }
        }

        // Step 3: Find the first index which is not marked
        for (int i = 0; i < n; i++) {
            if (arr[i] > 0) {
                return i + 1; // Missing number
            }
        }

        // Step 4: If all numbers from 1 to n are present, return n+1
        return n + 1;
    }
}
  
