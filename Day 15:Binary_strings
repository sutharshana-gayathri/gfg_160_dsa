Given two binary strings s1 and s2 consisting of only 0s and 1s. Find the resultant string after adding the two Binary Strings.
Note: The input strings may contain leading zeros but the output string should not have any leading zeros.

Input: s1 = "1101", s2 = "111"
Output: 10100
Explanation:
 1101
+ 111
10100
Input: s1 = "00100", s2 = "010"
Output: 110
Explanation: 
  100
+  10
  110
Constraints:
1 ≤s1.size(), s2.size()≤ 106


SOLUTION:

class Solution {
    public String addBinary(String s1, String s2) {
        // Initialize two pointers starting from the end of the strings
        int i = s1.length() - 1, j = s2.length() - 1;
        int carry = 0;
        StringBuilder result = new StringBuilder();
        
        // Loop until both strings are processed or there's a carry
        while (i >= 0 || j >= 0 || carry != 0) {
            int bit1 = (i >= 0) ? s1.charAt(i--) - '0' : 0; // Get bit from s1 or 0 if out of bounds
            int bit2 = (j >= 0) ? s2.charAt(j--) - '0' : 0; // Get bit from s2 or 0 if out of bounds
            
            int sum = bit1 + bit2 + carry; // Calculate sum of bits and carry
            result.append(sum % 2);       // Add the resulting bit to the result
            carry = sum / 2;              // Update carry
        }
        
        // Reverse the result to get the correct binary number
        String finalResult = result.reverse().toString();
        
        // Remove leading zeros
        int start = 0;
        while (start < finalResult.length() && finalResult.charAt(start) == '0') {
            start++;
        }
        
        // If all characters are zeros, return "0"
        return start == finalResult.length() ? "0" : finalResult.substring(start);
    }
}


        
    
